struct DirectionalLight {
	uint diffuse;
	uint specular;
	uint ambient;
	uint blur;
	float diffuse_intensity;
	float specular_intensity;
	float ambient_intensity;
	float shininess;
	vec4 direction;	
};

uniform sampler2D diffuse_tex;
uniform sampler2D specular_tex;
uniform sampler2D normal_tex;
uniform sampler2D depth_tex;


float get_shadow(vec4 position_world_space, float dotNL);

vec3 get_shaded_fragment(DirectionalLight dir_light, ivec2 coords) {

	float depth = texelFetch(depth_tex, coords,0).r *2.0 - 1.0;
	vec2 ndc_coords = (vec2(coords) / vec2(screen_width, screen_height))* 2.0 - 1.0;
	vec4 position_screen_space = vec4(ndc_coords , depth, 1);

	vec4 position_view_space = iP * position_screen_space;
	vec3 position = position_view_space.xyz / position_view_space.w;

	vec4 position_world_space = iVP * position_screen_space;
	vec3 view_dir_light = normalize(vec3(itV * dir_light.direction));

	//Get color and flatness from g buffer
	vec4 sample_diff = texelFetch(diffuse_tex, coords,0);
	vec3 mat_diff = sample_diff.rgb;
	float flatness = sample_diff.w;
	vec4 sample_spec = texelFetch(specular_tex, coords,0);
	vec3 mat_spec = sample_spec.rgb;
	float mat_spec_pow = sample_spec.w;

	//Get normal (and rebuilt it's z axis) from g buffer
	vec2 n = texelFetch(normal_tex, coords,0).xy * 2.0 -1;
	vec3 normal = vec3(n.x, n.y, sqrt(1 - dot(n.xy, n.xy)));

	//Important vectors
	vec3 view_dir = normalize(-position);
	vec3 half_dir = normalize(view_dir_light + view_dir);

	//Calculate base colors
	vec3 diff_color = split3(dir_light.diffuse) * dir_light.diffuse_intensity;
	vec3 spec_color = split3(dir_light.specular) * mat_spec_pow * dir_light.specular_intensity;
	vec3 amb_final = split3(dir_light.ambient) * dir_light.ambient_intensity;

	//final colors for diffuse, specular and ambient
	float dotNL = max(0, dot(normal, view_dir_light));
	vec3 diffuse_final = dotNL * diff_color;
	vec3 specular_final = spec_color * pow(max(dot(half_dir, normal), 0.0001), dir_light.shininess);


	vec3 final_color =  amb_final * mat_diff  + flatness * mat_diff + (1.0 - flatness) *get_shadow(position_world_space, dotNL)*(mat_diff * diffuse_final + mat_spec * specular_final);
	return clean_color(final_color);
}


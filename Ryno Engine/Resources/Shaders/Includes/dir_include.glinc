E(Includes/light)

struct DirectionalLight {
	uint diffuse;
	uint specular;
	uint ambient;
	uint blur;
	float diffuse_intensity;
	float specular_intensity;
	float ambient_intensity;
	float shininess;
	vec4 direction;	
};

uniform sampler2D ssao_visibility;
float ssao;

float get_shadow(vec4 position_world_space, float dotNL);

float get_ssao(ivec2 coords) {
	return 1-texelFetch(ssao_visibility, coords, 0).r;
}

vec3 get_shaded_fragment(DirectionalLight dir_light, const MatInfo info) {


	vec3 view_dir_light = normalize(vec3(itV * dir_light.direction));

	//Important vectors
	vec3 half_dir = normalize(view_dir_light + info.view_dir_view_space.xyz);

	//Calculate base colors
	vec3 diff_color = split3(dir_light.diffuse) * dir_light.diffuse_intensity * info.mat_diff_and_flat.xyz;
	vec3 spec_color = split3(dir_light.specular)  * dir_light.specular_intensity * info.mat_spec_and_pow.xyz;
	vec3 amb_final = split3(dir_light.ambient) * dir_light.ambient_intensity * info.mat_diff_and_flat.xyz;

	//final colors for diffuse, specular and ambient
	vec3 normal = info.normal_view_space.xyz;
	float dotNL = max(0, dot(normal, view_dir_light));
	vec3 diffuse_final = dotNL * diff_color;
	vec3 specular_final = spec_color * pow(max(dot(half_dir, normal), 0.0001), dir_light.shininess * info.mat_spec_and_pow.w);

	float shadow = get_shadow(info.position_world_space, dotNL);
	vec3 final_color =  amb_final * ssao + lerp(shadow*(diffuse_final + specular_final), info.mat_diff_and_flat.xyz,info.mat_diff_and_flat.w);
	return final_color;
}


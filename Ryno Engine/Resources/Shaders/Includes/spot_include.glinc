E(Includes/light)

struct SpotLight {
	uint diffuse;
	uint specular;
	float diffuse_intensity;
	float specular_intensity;
	vec4 position; 
	vec4 direction;
	float attenuation; uint blur; float shininess; float _pad0;
	float radius; float inner_angle; float outer_angle; float _pad1;
};


float get_shadow(vec3 position_world_space, float dotNL);

vec3 get_shaded_fragment(SpotLight spot_light, const MatInfo info) {


	//Important vectors
	vec4 light_dir_world_space_not_normalized = spot_light.position - info.position_world_space;
	vec4 light_dir_world_space = normalize(light_dir_world_space_not_normalized);
	vec4 light_dir_view_space = itV * light_dir_world_space;
	vec4 half_dir_view_space = vec4(normalize(light_dir_view_space.xyz + info.view_dir_view_space.xyz), 0);

	//Calculate attenuation
	float distance = length(light_dir_world_space_not_normalized.xyz);
	float attenuation = 1+pow(distance, spot_light.attenuation);

	//Calculate base colors
	vec3 diff_color = split3(spot_light.diffuse) * spot_light.diffuse_intensity;
	vec3 spec_color = split3(spot_light.specular) * spot_light.specular_intensity * info.mat_spec_and_pow.xyz;


	//final colors for diffuse and specular
	vec3 normal = info.normal_view_space.xyz;
	float dotNL = dot(normal, light_dir_view_space.xyz);

	vec3 diffuse_final = max(0, dotNL) * diff_color * info.mat_diff_and_flat.xyz;
	vec3 specular_final = spec_color * pow(max(dot(half_dir_view_space.xyz, normal), 0.000001), spot_light.shininess * info.mat_spec_and_pow.w);


	//CONE CUTOFF (with smoothing to the edges)
	float angle = acos(dot(normalize(info.position_world_space.xyz - spot_light.position.xyz), spot_light.direction.xyz));

	float fade = 1-revLerp(spot_light.inner_angle, spot_light.outer_angle, angle);

	float shadow = get_shadow(info.position_world_space.xyz, dotNL);
	//fragment color
	return lerp(fade * shadow *  (specular_final + diffuse_final) / attenuation, info.mat_diff_and_flat.xyz, info.mat_diff_and_flat.w);
}



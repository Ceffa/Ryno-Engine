#version 430

layout(std140, binding = 0) uniform glob_ubo {
	mat4 V;
	mat4 iV;
	mat4 P;
	mat4 iP;
	mat4 VP;
	mat4 iVP;
	mat4 itV;
	vec4 cameraPos;
	float time;
	int screen_width;
	int screen_height;
	float _pad;
};

float split(uint color, int n) {
	int index = n * 8;
	return bitfieldExtract(color, index, 8) / 255.0f;
}
vec3 split3(uint color) {
	return vec3(split(color, 0), split(color, 1), split(color, 2));
}
vec4 split4(uint color) {
	return vec4(split(color, 0), split(color, 1), split(color, 2), split(color,3));
}

float length2(vec3 l) {
	return l.x*l.x + l.y * l.y + l.z * l.z;
}

float lerp(float a, float b, float t) {
	return a * (1-t) + t * b;
}

vec3 lerp(vec3 a, vec3 b, float f) {
	return vec3(lerp(a.x, b.x, f), lerp(a.y, b.y, f), lerp(a.z, b.z, f));
}

vec3 maxVec(float f, vec3 v) {
	return vec3(max(f, v.x), max(f, v.y), max(f, v.z));
}

vec3 absVec(vec3 v) {
	return vec3(abs(v.x), abs(v.y), abs(v.z));
}

vec3 w_div(vec4 v) {
	return v.xyz / v.w;
}

float revLerp(float A, float B, float t) {
	return clamp((t - A) / (B - A),0,1);
}